import tkinter as tk
import time
import serial
import threading
import continuous_threading
'''link_YouTube:- https://www.youtube.com/watch?v=0V-6pu1Gyp8'''
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from tkinter import *
import numpy as np
import serial as sr
import random
import tkinter
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure

"""'''ser = serial.Serial('COM10',9600)
val1 = 0

index = []'''

def readserial():
    global val1
    ser_bytes = ser.readline()
    ser_bytes = ser_bytes.decode("utf-8")
    print(ser_bytes.rstrip())
    val1 = ser_bytes
    index.append(val1)
    
    if len(index) == 1:
        display1 = tk.Label(root,text=index[0]).place(x=50,y=10)
    elif len(index) == 2:
        #display1 = tk.Label(root,text=index[0]).place(x=10,y=10)
        display2 = tk.Label(root,text=index[1]).place(x=50,y=40)

        
    if len(index) == 2:
        #print("Done")
        index.clear()
    
    time.sleep(0.5)

t1 = continuous_threading.PeriodicThread(0.5, readserial)"""
ser = serial.Serial('COM9', 9600)
time.sleep(2)
list_data = list()


def plot_data():
    #------reading the data once from the Arduino Serial-----#
    #print(" ",end = "\n")
    
    global list_data
    data = ser.readline()
    bin_data = data.decode()
    str_data = bin_data.rstrip()
    list_data = str_data.split(",")
    #------compeletd the reading the data from the arduion -----#

    #print(list_data, end = "\n")
    

#---------global variables1-------
data_1 = np.array([])
data_b_1 = np.array([])
data_c_1 = np.array([])
a_1 =0
b_1 =0
c_1 =0

def plot_data_1():
    global data_1,data_1,data_b_1,data_c_1,a_1,b_1,c_1
    

    '''a = s.readline()
    a.decode()])'''

    #print(list_data, end = "\n")
        
    """a = round(random.uniform(-50.0, 8.5),4)
    if(len(data_1)<100):
        data_1 = np.append(data_1, a)
    else:
        data_1[0:99] = data_1[1:100]
        data_1[99] = a
            
    lines.set_xdata(np.arange(0,len(data_1)))
    lines.set_ydata(data_1)"""
    try:
        a_1 = int(list_data[0])
        b_1 = int(list_data[1])
        c_1 = int(list_data[2])
        #print(a_2, b_2, c_2)
        #a_3 = round(random.uniform(-50.0, 8.5),4)
        #b_3 = random.random()
        if(len(data_1)<100):
            data_1 = np.append(data_1, a_1)
            data_b_1 = np.append(data_b_1, b_1)
            data_c_1 = np.append(data_c_1, c_1)
        else:
            data_1[0:99] = data_1[1:100]
            data_1[99] = a_1
            data_b_1[0:99] = data_b_1[1:100]
            data_b_1[99] = b_1
            data_c_1[0:99] = data_c_1[1:100]
            data_c_1[99] = c_1
            
        lines_1.set_xdata(data_1)
        lines_1.set_ydata(data_b_1)
        lines_1.set_3d_properties(data_c_1)

        canvas_1.draw()
    except:
        #print(type(np.numpy(list_data[6])), np.numpy(list_data[6]),data_3)
        pass

    try:
        

        display1 = tk.Label(root,text=list_data[0],bg= 'black',fg = "red").place(x=245,y=160)
        display2 = tk.Label(root,text=list_data[1],bg= 'black',fg = "red").place(x=245,y=210)
        display3 = tk.Label(root,text=list_data[2],bg= 'black',fg = "red").place(x=245,y=260)
    except:
        pass
                
    #root.after(1,plot_data_1)
    
    
#---------global variables2-------
data_2 = np.array([])
data_b_2 = np.array([])
data_c_2 = np.array([]) 
a_2=0
b_2=0
c_2=0
def plot_data_2():
    global data_2,a_2,data_c_2,data_b_2

    
    '''a = s.readline()
    a.decode()])'''
    try:
        a_2 = int(list_data[3])
        b_2 = int(list_data[4])
        c_2 = int(list_data[5])
        #print(a_2, b_2, c_2)
        #a_3 = round(random.uniform(-50.0, 8.5),4)
        #b_3 = random.random()
        if(len(data_2)<100):
            data_2 = np.append(data_2, a_2)
            data_b_2 = np.append(data_b_2, b_2)
            data_c_2 = np.append(data_c_2, c_2)
        else:
            data_2[0:99] = data_2[1:100]
            data_2[99] = a_2
            data_b_2[0:99] = data_b_2[1:100]
            data_b_2[99] = b_2
            data_c_2[0:99] = data_c_2[1:100]
            data_c_2[99] = c_2
            
        lines_2.set_xdata(data_2)
        lines_2.set_ydata(data_b_2)
        lines_2.set_3d_properties(data_c_2)

        """if(len(data_3)<100):
            data_3 = np.append(data_3, a_3)
            data_b_3 = np.append(data_b_3, b_3)
            data_c_3 = np.append(data_c_3, c_3)
        else:
            data_3[0:99] = data_3[1:100]
            data_3[99] = a_3
            data_b_3[0:99] = data_b_3[1:100]
            data_b_3[99] = b_3
            data_c_3[0:99] = data_c_3[1:100]
            data_c_3[99] = c_3

        lines_3.set_xdata(data_3)
        print(type(data_3))
        lines_3.set_ydata(data_b_3)
        print(type(data_b_3))
        lines_3.set_3d_properties(data_c_3)
        print(type(data_c_3))"""
        
        canvas_2.draw()
    except:
        #print(type(np.numpy(list_data[6])), np.numpy(list_data[6]),data_3)
        pass

    try:
        display1 = tk.Label(root,text=list_data[3],fg = "red",bg= 'black').place(x=760,y=160)
        display2 = tk.Label(root,text=list_data[4],fg = "red",bg= 'black').place(x=760,y=210)
        display3 = tk.Label(root,text=list_data[5],fg = "red",bg= 'black').place(x=760,y=260)
    except:
        pass
        
                
    #root.after(1,plot_data_2)
    
#---------global variables3-------
data_3 = np.array([])
data_b_3 = np.array([])
data_c_3 = np.array([])
a_3 =0
b_3 =0
c_3 =0
global lines_3
def plot_data_3():
    global data_3,a_3,b_3,c_3,data_b_3,data_c_3,lines_3
    #print(list_data, end = "\n")
      

    '''a = s.readline()
    a.decode()])'''

    try:
        a_3 = int(list_data[6])
        b_3 = int(list_data[7])
        c_3 = int(list_data[8])
        print(a_3, b_3, c_3)
        #a_3 = round(random.uniform(-50.0, 8.5),4)
        #b_3 = random.random()
        if(len(data_3)<1000):
            data_3 = np.append(data_3, a_3)
            data_b_3 = np.append(data_b_3, b_3)
            data_c_3 = np.append(data_c_3, c_3)
        else:
            data_3[0:999] = data_3[1:100]
            data_3[999] = a_3
            data_b_3[0:999] = data_b_3[1:100]
            data_b_3[999] = b_3
            data_c_3[0:999] = data_c_3[1:100]
            data_c_3[999] = c_3
            
        lines_3.set_xdata(data_3)
        lines_3.set_ydata(data_b_3)
        lines_3.set_3d_properties(data_c_3)

        """if(len(data_3)<100):
            data_3 = np.append(data_3, a_3)
            data_b_3 = np.append(data_b_3, b_3)
            data_c_3 = np.append(data_c_3, c_3)
        else:
            data_3[0:99] = data_3[1:100]
            data_3[99] = a_3
            data_b_3[0:99] = data_b_3[1:100]
            data_b_3[99] = b_3
            data_c_3[0:99] = data_c_3[1:100]
            data_c_3[99] = c_3

        lines_3.set_xdata(data_3)
        print(type(data_3))
        lines_3.set_ydata(data_b_3)
        print(type(data_b_3))
        lines_3.set_3d_properties(data_c_3)
        print(type(data_c_3))"""
        
        canvas_3.draw()
    except:
        #print(type(np.numpy(list_data[6])), np.numpy(list_data[6]),data_3)
        pass
    try:
        
        display1 = tk.Label(root,text=list_data[6],bg= 'black',fg = "red").place(x=1250,y=160)
        display2 = tk.Label(root,text=list_data[7],bg= 'black',fg = "red").place(x=1250,y=210)
        display3 = tk.Label(root,text=list_data[8],bg= 'black',fg = "red").place(x=1250,y=260)
    except:
        pass
        
                
    #root.after(1,plot_data_3)

root = tk.Tk()
root.title("DRDO")
root.configure(background = "black")
root.iconbitmap(r'C:\Users\Lenovo\Desktop\DRDO\vishnu\drdo\favicon.ico')
root.geometry("1920x1080")


#-----------Top_Mission_Heading_----------
Heading = tk.Label(root,text=" Rocket ",font=('Arial Italic', 28, 'bold'),fg = "red",bg= 'black').place(x=760,y=60)

ssw1 = tk.Label(root,text="Acc_X",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=140,y=150)
w2 = tk.Label(root,text="Acc_Y",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=140,y=200)
w3 = tk.Label(root,text="Acc_Z",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=140,y=250)

#display1 = tk.Label(root,text="Reading_the_data1",bg= 'black',fg = "red").place(x=245,y=160)
#display2 = tk.Label(root,text="Reading_the_data2",bg= 'black',fg = "red").place(x=245,y=210)
#display3 = tk.Label(root,text="Reading_the_data3",bg= 'black',fg = "red").place(x=245,y=260)

w1 = tk.Label(root,text="Gyro_X",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=640,y=150)
w2 = tk.Label(root,text="Gyro_Y",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=640,y=200)
w3 = tk.Label(root,text="Gyro_Z",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=640,y=250)

#display1 = tk.Label(root,text="Reading_the_data1",fg = "red",bg= 'black').place(x=760,y=160)
#display2 = tk.Label(root,text="Reading_the_data2",fg = "red",bg= 'black').place(x=760,y=210)
#display3 = tk.Label(root,text="Reading_the_data3",fg = "red",bg= 'black').place(x=760,y=260)

w1 = tk.Label(root,text="Mag_X",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=1140,y=150)
w2 = tk.Label(root,text="Mag_Y",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=1140,y=200)
w3 = tk.Label(root,text="Mag_Z",font=('Arial', 24, 'bold'),fg = "red",bg= 'black').place(x=1140,y=250)

#display1 = tk.Label(root,text="Reading_the_data1",bg= 'black',fg = "red").place(x=1250,y=160)
#display2 = tk.Label(root,text="Reading_the_data2",bg= 'black',fg = "red").place(x=1250,y=210)
#display3 = tk.Label(root,text="Reading_the_data3",bg= 'black',fg = "red").place(x=1250,y=260)




#-------create Plot object on GUI_1-------
#add figure canvas
#add figure canvas
fig_1 = Figure();
ax_1 = fig_1.add_subplot(111,projection='3d')

#ax = plt.axes(xlim=(0,100), ylim(0,120));  #displaying only 100 sam
ax_1.set_title('Accelerometer ');
ax_1.set_xlabel('X_label')
ax_1.set_ylabel('Y_label')
#ax_3.set_zlabel('Z_label')

ax_1.set_xlim(-30000,30000)
ax_1.set_ylim(-30000,30000)
ax_1.set_zlim(-30000, 30000)
lines_1 = ax_1.plot3D([],[],[])[0]

canvas_1  = FigureCanvasTkAgg(fig_1, master= root)  #A  tk.DrawingArea.
canvas_1.get_tk_widget().place(x=10, y= 400, width = 600, height = 400)
canvas_1.draw()



#-------create Plot object on GUI_2-------
#add figure canvas
fig_2 = Figure();
ax_2 = fig_2.add_subplot(111,projection='3d')

#ax = plt.axes(xlim=(0,100), ylim(0,120));  #displaying only 100 sam
ax_2.set_title('Gyrometer ');
ax_2.set_xlabel('X_label')
ax_2.set_ylabel('Y_label')
#ax_3.set_zlabel('Z_label')

ax_2.set_xlim(-3000,3000)
ax_2.set_ylim(-3000,3000)
ax_2.set_zlim(-3000, 3000)
lines_2 = ax_2.plot3D([],[],[])[0]

canvas_2  = FigureCanvasTkAgg(fig_2, master= root)  #A  tk.DrawingArea.
canvas_2.get_tk_widget().place(x=550, y= 400, width = 600, height = 400)
canvas_2.draw()




#-------create Plot object on GUI_3-------
#add figure canvas
fig_3 = Figure();
ax_3 = fig_3.add_subplot(111,projection='3d')

#ax = plt.axes(xlim=(0,100), ylim(0,120));  #displaying only 100 sam
ax_3.set_title('Magnetometer ');
ax_3.set_xlabel('X_label')
ax_3.set_ylabel('Y_label')
#ax_3.set_zlabel('Z_label')

ax_3.set_xlim(-3000,3000)
ax_3.set_ylim(-3000,3000)
ax_3.set_zlim(-3000, 3000)
lines_3 = ax_3.plot3D([],[],[])[0]

canvas_3  = FigureCanvasTkAgg(fig_3, master= root)  #A  tk.DrawingArea.
canvas_3.get_tk_widget().place(x=1050, y= 400, width = 600, height = 400)
canvas_3.draw()


#------


#------Right side image------------
photo = PhotoImage(file=r'C:\Users\Lenovo\Desktop\DRDO\vishnu\drdo\photos\drdo-official-logo2.png')
labelphoto = Label(root, image = photo).place(x=1380,y=0)

#t1.start()
#t1.join()

#-------------this is the part of the draing line on the map-------#


# import gmplot package
import gmplot
import webbrowser

latitude_list = [ 30.3358376, 30.307977, 30.3216419 ]
longitude_list = [ 77.8701919, 78.048457, 78.0413095]

gmap3 = gmplot.GoogleMapPlotter(30.3164945,
								78.03219179999999, 13)

# scatter method of map object
# scatter points on the google map
gmap3.scatter( latitude_list, longitude_list, '#FF0000',
							size = 40, marker = False )

# Plot method Draw a line in
# between given coordinates
gmap3.plot(latitude_list, longitude_list,
		'cornflowerblue', edge_width = 2.5)

gmap3.draw( r'C:\Users\Lenovo\Desktop\DRDO\vishnu\drdo\MAP.DRDO\map\maps.html' )



#-----this is the end part of the drawing the line on the map-----#

#-----------This is the Starting part of map button on the GUI ------------#


class Check:
    """ create checkbuttons for links """
    def __init__(self, master, site):
        self.var = tk.IntVar()
        self.site = site
        self = tk.Checkbutton(root,text = self.site,variable = self.var,command = self.check).place(x=1358,y=189)
 
    def check(self):
        v = self.var.get() # 1 checked 0 unchecked
        if v:
            checked.append(self.site)
        else:
            checked.append(self.site)
            """if self.site in checked:
                checked.remove(self.site)"""
 
class App:
    def __init__(self, sites):
        """creates the window"""
        c = []
        #root = tk.Tk()
        for site in sites:
            c.append(Check(root, site))
        tk.Button(root,text = "Launch",command = self.start).place(x=1400,y=250)
        #root.geometry("1920x1080")
        #root.mainloop()
        
 
    def start(self):
        chrome = "C:/Program Files/Google/Chrome/Application/chrome.exe %s"
        w = webbrowser.get(chrome)
        for checked_site in checked:
            w.open(checked_site)
 
checked = []
app = App([r'C:\Users\Lenovo\Desktop\DRDO\vishnu\drdo\MAP.DRDO\map\maps.html'])

t0 = continuous_threading.PeriodicThread(0.1, plot_data)   #take the seial data.
t0.start()

#root.after(1,plot_data_1)
t1 = continuous_threading.PeriodicThread(0.1, plot_data_1)
t1.start()
#root.after(1,plot_data_2)
t2 = continuous_threading.PeriodicThread(0.1, plot_data_2)
t2.start()
#root.after(1,plot_data_3)
t3 = continuous_threading.PeriodicThread(0.1, plot_data_3)
t3.start()



#th = continuous_threading.ContinuousThread(target=plot_data_3)
#th.start()

root.mainloop()
